.step(data-title='How it Works', data-file='app.py')
  :markdown
    ## Flask Boilerplate

    First, we'll create a file in our project root called `app.py` to seperate the
    boilerplate to run our Flask app from the logic of our Click to Call
    implementation.  This includes importing the `app` object we create in
    `clicktocall/app.py` and then running it if the script is executed.

    For convenience sake for Heroku users, if the `PORT` environment variable
    exists, we'll run the app on the PORT the environment specified.  If not, we'll
    run on port 5000 and turn on debug mode for as we work on our project.
.step(data-title="Route: Home Page", data-file='clicktocall/app.py', data-highlight="15-19")
  :markdown
    ## Rendering the Home Page

    This route is pretty simple - for requests to the root URL of our web app, we will render a [Jinja2](http://jinja.pocoo.org/docs/dev/) template with the HTML, CSS, and JavaScript to drive our click-to-call page.


.step(data-title='Form Post URL', data-file='clicktocall/app.py', data-highlight="22-44")
  :markdown
    ## Form POST Url

    This route will respond to an AJAX request from the UI for our click-to-call web page, which we'll examine in a moment. Here, we use an authenticated Twilio REST API client to make an outbound phone call to the phone number that was submitted by the user. 

    For an outbound phone call, we need to specify a public URL for Twilio to request once the call has connected, so it knows what to do next. In a click to call application, these instructions could be as simple as "dial our sales number", or it could put a user into a full blown IVR system you've built.

    In this request, we assume that the domain that your app is running on is stored in the "host" header (probable in production), but you could change this to be anything. When Twilio dials out to the user, it will use the TwiML generated by the `/outbound` route, which we'll examine next.

.step(data-title='TwiML Response', data-file='clicktocall/app.py', data-highlight='47-61')
  :markdown
    ## Controller - TwiML Instructions

    Before Twilio will connect a call, it needs to know what to do once the call is made. Twilio will request these instructions from your web app as an XML document, using tags that we call [TwiML](/docs/api/twiml) to tell it what to do. 

    In this route, we are going to use the Twilio Python module to generate an XML document that looks like this, using the Twiml `Say` and `Dial` tags:

        <Response>
          <Say voice="alice">
            Thanks for calling [...]
          </Say>
          <!-- in a real app, you would dial your sales team or whomever -->
          <!--
          <Dial>+16515551111</Dial>
          -->
        </Response>

    That's most of the interesting bits on the back end - let's move to the front end code to see how we're collecting the phone number from the user.